/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { storeDeleteOrder } from "../funcs/storeDeleteOrder.js";
import { storeGetInventory } from "../funcs/storeGetInventory.js";
import {
  GetOrderByIdAcceptEnum,
  storeGetOrderById,
} from "../funcs/storeGetOrderById.js";
import {
  PlaceOrderAcceptEnum,
  storePlaceOrder,
} from "../funcs/storePlaceOrder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { PlaceOrderAcceptEnum } from "../funcs/storePlaceOrder.js";

export { GetOrderByIdAcceptEnum } from "../funcs/storeGetOrderById.js";

export class Store extends ClientSDK {
  /**
   * Returns pet inventories by status
   *
   * @remarks
   * Returns a map of status codes to quantities
   */
  async getInventory(
    security: operations.GetInventorySecurity,
    options?: RequestOptions,
  ): Promise<{ [k: string]: number }> {
    return unwrapAsync(storeGetInventory(
      this,
      security,
      options,
    ));
  }

  /**
   * Place an order for a pet
   */
  async placeOrder(
    request: components.Order,
    options?: RequestOptions & { acceptHeaderOverride?: PlaceOrderAcceptEnum },
  ): Promise<operations.PlaceOrderResponse> {
    return unwrapAsync(storePlaceOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Find purchase order by ID
   *
   * @remarks
   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   */
  async getOrderById(
    request: operations.GetOrderByIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetOrderByIdAcceptEnum;
    },
  ): Promise<operations.GetOrderByIdResponse> {
    return unwrapAsync(storeGetOrderById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete purchase order by ID
   *
   * @remarks
   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   */
  async deleteOrder(
    request: operations.DeleteOrderRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(storeDeleteOrder(
      this,
      request,
      options,
    ));
  }
}
