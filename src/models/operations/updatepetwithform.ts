/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePetWithFormRequestBody = {
  /**
   * Updated name of the pet
   */
  name?: string | undefined;
  /**
   * Updated status of the pet
   */
  status?: string | undefined;
};

export type UpdatePetWithFormRequest = {
  /**
   * ID of pet that needs to be updated
   */
  petId: number;
  requestBody?: UpdatePetWithFormRequestBody | undefined;
};

/** @internal */
export const UpdatePetWithFormRequestBody$inboundSchema: z.ZodType<
  UpdatePetWithFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type UpdatePetWithFormRequestBody$Outbound = {
  name?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const UpdatePetWithFormRequestBody$outboundSchema: z.ZodType<
  UpdatePetWithFormRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePetWithFormRequestBody
> = z.object({
  name: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePetWithFormRequestBody$ {
  /** @deprecated use `UpdatePetWithFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePetWithFormRequestBody$inboundSchema;
  /** @deprecated use `UpdatePetWithFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePetWithFormRequestBody$outboundSchema;
  /** @deprecated use `UpdatePetWithFormRequestBody$Outbound` instead. */
  export type Outbound = UpdatePetWithFormRequestBody$Outbound;
}

export function updatePetWithFormRequestBodyToJSON(
  updatePetWithFormRequestBody: UpdatePetWithFormRequestBody,
): string {
  return JSON.stringify(
    UpdatePetWithFormRequestBody$outboundSchema.parse(
      updatePetWithFormRequestBody,
    ),
  );
}

export function updatePetWithFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePetWithFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePetWithFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePetWithFormRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePetWithFormRequest$inboundSchema: z.ZodType<
  UpdatePetWithFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  petId: z.number().int(),
  RequestBody: z.lazy(() => UpdatePetWithFormRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePetWithFormRequest$Outbound = {
  petId: number;
  RequestBody?: UpdatePetWithFormRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePetWithFormRequest$outboundSchema: z.ZodType<
  UpdatePetWithFormRequest$Outbound,
  z.ZodTypeDef,
  UpdatePetWithFormRequest
> = z.object({
  petId: z.number().int(),
  requestBody: z.lazy(() => UpdatePetWithFormRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePetWithFormRequest$ {
  /** @deprecated use `UpdatePetWithFormRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePetWithFormRequest$inboundSchema;
  /** @deprecated use `UpdatePetWithFormRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePetWithFormRequest$outboundSchema;
  /** @deprecated use `UpdatePetWithFormRequest$Outbound` instead. */
  export type Outbound = UpdatePetWithFormRequest$Outbound;
}

export function updatePetWithFormRequestToJSON(
  updatePetWithFormRequest: UpdatePetWithFormRequest,
): string {
  return JSON.stringify(
    UpdatePetWithFormRequest$outboundSchema.parse(updatePetWithFormRequest),
  );
}

export function updatePetWithFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePetWithFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePetWithFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePetWithFormRequest' from JSON`,
  );
}
